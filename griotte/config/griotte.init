#! /bin/sh
### BEGIN INIT INFO
# Provides:          griotte
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Multimedia Server
# Description:       Griotte multimedia server (http://griotte.erasme.org)
### END INIT INFO

# Author: Michel blanc <mblanc@erasme.org>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="Griotte server"
NAME=griotte

GRIOTTE_BIN_PATH=/usr/local/griotte/bin
GRIOTTE_DAEMONS='server storage multimedia image adc gpio'

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Export proper pythonpath
export PYTHONPATH=${GRIOTTE_BIN_PATH}/../lib:$PYTHONPATH

DAEMON=/usr/local/bin/$NAME
PIDPATH=/var/run/
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$GRIOTTE_BIN_PATH" ] || exit 0

# Create log path
[ ! -z "$GRIOTE_LOG_PATH" ] && [ ! -d "$GRIOTE_LOG_PATH" ] && mkdir -p $GRIOTE_LOG_PATH

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

VERBOSE="yes"
#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  PIDFILE=$PIDPATH/"$1".pid
  DAEMON=$GRIOTTE_BIN_PATH/$1
  LOGFILE=""
  [ ! -z "$GRIOTE_LOG_PATH" ] && LOGFILE="--log_file_prefix=$GRIOTE_LOG_PATH/$1.log"

  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
    || return 1
  start-stop-daemon --start  --background --quiet --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- \
    $GRIOTTE_ARGS $LOGFILE \
    || return 2
  # Add code here, if necessary, that waits for the process to be ready
  # to handle requests from services started subsequently which depend
  # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  DAEMON=$GRIOTTE_BIN_PATH/$1
  PIDFILE=$PIDPATH/"$1".pid

  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  # Wait for children to finish too if this is a daemon that forks
  # and if the daemon is only ever run from this initscript.
  # If the above conditions are not satisfied then add some other code
  # that waits for the process to drop all resources that could be
  # needed by services started subsequently.  A last resort is to
  # sleep for some time.
  start-stop-daemon --stop --quiet --oknodo --retry=0/10/KILL/5 --name $NAME
  [ "$?" = 2 ] && return 2
  # Many daemons don't delete their pidfiles when they exit.
  rm -f $PIDFILE
  return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  #
  # If the daemon can reload its configuration without
  # restarting (for example, when it is sent a SIGHUP),
  # then implement that here.
  #
  start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $1
  return 0
}

case "$1" in
  start)
  for d in $GRIOTTE_DAEMONS; do
    NAME="g-"$d
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $d" "$NAME"
    do_start $d
    if [ "$NAME" = "g-server" ]; then
      sleep 5
    fi
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  done
  ;;
  stop)
  for d in $GRIOTTE_DAEMONS; do
    NAME="g-"$d
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $d" "$NAME"
    do_stop $d
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  done
  ;;
  status)
  for d in $GRIOTTE_DAEMONS; do
    NAME="g-"$d
    status_of_proc "$NAME" "$NAME"
  done
  ;;
  #reload|force-reload)
  #
  # If do_reload() is not implemented then leave this commented out
  # and leave 'force-reload' as an alias for 'restart'.
  #
  #log_daemon_msg "Reloading $DESC" "$NAME"
  #do_reload
  #log_end_msg $?
  #;;
  restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  for d in $GRIOTTE_DAEMONS; do
    NAME="g-"$d
    log_daemon_msg "Restarting $d" "$NAME"
    do_stop $d
    case "$?" in
      0|1)
      do_start $d
      if [ "$NAME" = "g-server" ]; then
        sleep 5
      fi
      case "$?" in
        0) log_end_msg 0 ;;
        1) log_end_msg 1 ;; # Old process is still running
        *) log_end_msg 1 ;; # Failed to start
      esac
      ;;
      *)
      # Failed to stop
      log_end_msg 1
      ;;
    esac
  done
  ;;
  *)
  #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

